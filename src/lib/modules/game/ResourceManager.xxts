import { Readable, Writable, writable } from "svelte/store";
import defaultProjectData from "../../../assets/engineAssets/default_game.json";
import { cards } from "../cardManager";
import { db, getDocumentGameData, NoDatabaseError, STORE_NAME_RESOURCES, STORE_NAME_SAVES } from "../database";
import { deserialize, requestAsync, serialize } from "../serialize";
import Behaviour from "../structs/behaviour";
import type Folder from "../structs/folder";
import Resource from "../structs/resource";
import Room from "../structs/room";
import SoundEffect from "../structs/soundEffect";
import Sprite from "../structs/sprite";
import FileManager from "./FileManager";

console.log("resource_manager.ts loading")


/*
  [ game instance ]     <----.
                             | load
  [ resource manager ] ------'  <--.   <------------.
                                   | sync           |
  [ indexeddb ]       <------------'                |
                                                    | save / load
  [ export / import  ] <-----------------------------'

 */

const defaultGameSettings = {
    title: "your game's name here",
    LICENSE: "No license specified.",
}

const saveVersion = 4;
interface SaveData {
    resources: Resource[]
    settings: typeof defaultGameSettings,
    version: typeof saveVersion,
}

// small hack

let lastSavedTime = 0;

export default class ResourceManager {
    fileManager: FileManager
    
    constructor() {
        this.fileManager = new FileManager();
    }

    static async DefaultProject() {
        let rm = new ResourceManager();
        await rm.loadDefaultProject();
        return rm;
    }

    addResource<T extends Resource>(resource: T) { 
        this.fileManager.objectHandle(resource.uuid).set(resource);
    }

    getResourceOfType(uuid: string, type: typeof Resource): Resource | null {
        let r = this.fileManager.getObj(uuid);
        if(r instanceof type)
            return r;
        else
            return null;
    }

    getResource(uuid: string): Resource|null {
        return this.fileManager.getObj(uuid);
    }

    deleteResource(uuid: string) {
        this.fileManager.objectHandle(uuid).delete();
        cards.remove(uuid, true);
    }

    // deprecated
    // TODO delete
    moveResource(resourceUUID: string, beforeResourceUUID: string) {
        // let r1 = this.getResource(resourceUUID);
        // let r2 = this.getResource(beforeResourceUUID);
        
        // if(!(r1 && r2) || resourceUUID == beforeResourceUUID) return false;

        // let resources = Array.from(this.resources.values());
        
        // let removeIndex = resources.findIndex(x => x.uuid == resourceUUID);
        // resources.splice(removeIndex, 1);

        // let insertIndex = resources.findIndex(x => x.uuid == beforeResourceUUID);
        // resources.splice(insertIndex, 0, this.resources.get(resourceUUID));

        // this.resources.clear();
        // for(let res of resources) {
        //     this.resources.set(res.uuid, res);
        // }

        return true;
    }

    getResourceTypeListStore(type: typeof Resource): Readable<Resource[]> {
        return this.fileManager.viewHandle(value => (value instanceof type));
    }



    // getAllOfResourceType(type: typeof Resource): Resource[] {
    //     return Array.from(this.resources.values()).filter(x => x instanceof type);
    // }
    // convenience functions
    // getRooms(): Room[] { return this.getAllOfResourceType(Room) as Room[]; }
    // getSprites(): Sprite[] { return this.getAllOfResourceType(Sprite) as Sprite[]; }
    // getBehaviours(): Behaviour[] { return this.getAllOfResourceType(Behaviour) as Behaviour[]; }
    // getSoundEffects(): SoundEffect[] { return this.getAllOfResourceType(SoundEffect) as SoundEffect[]; }
    
    getRoomsStore(): Readable<Room[]> { return this.getResourceTypeListStore(Room) as Readable<Room[]>; }
    getSpritesStore(): Readable<Sprite[]> { return this.getResourceTypeListStore(Sprite) as Readable<Sprite[]>; }
    getBehavioursStore(): Readable<Behaviour[]> { return this.getResourceTypeListStore(Behaviour) as Readable<Behaviour[]>; }
    getSoundEffectsStore(): Readable<SoundEffect[]> { return this.getResourceTypeListStore(SoundEffect) as Readable<SoundEffect[]>; }

    getResourceStore(resource: Resource|string): Writable<Resource> | null {
        const uuid = (typeof resource == "string")? resource : resource.uuid;

        return this.fileManager.objectHandle(uuid);

        
        // if(typeof resource == "string") resource = this.getResource(resource);
        // if(this.stores.has(resource)) return this.stores.get(resource);
        
        // if(!resource) return null;
        
        // // create a fresh store

        // let store = writable(resource);

        // // only for top-level resources we also save it in the indexeddb
        // if(this.resources.has(resource.uuid))
        //     store.subscribe(value => {
        //         if(value != resource) {
        //             throw Error("You can only modify, not set/change the resource using a store.")
        //         }

        //         this.dbSaveResource(resource); // async!!

        //         //always also triggers a general update (should maybe be refactored out eventually)
        //         this.refresh();
        //     });

        // this.stores.set(resource, store);
        // return store;
    }

    async dbSaveResource(resource: Resource) {
        // TODO just ignoring it feels dirty :S
        if(!db) { console.error("database access before initialization."); return; }

        let trans = db.transaction([STORE_NAME_RESOURCES], "readwrite");
        let objectStore = trans.objectStore(STORE_NAME_RESOURCES);
        
        let request = objectStore.put(await serialize(resource), resource.uuid)
        
        request.onsuccess = event => {
            console.log(`saved resource ${resource.uuid} / ${resource.name} (${resource.type})`);
        };

        await new Promise((resolve, reject) => {trans.oncomplete = resolve; trans.onerror = reject})
    }

    async dbDeleteResource(resourceUUID: string) {
        if(!db) { console.error("database access before initialization!"); return; }

        let trans = db.transaction([STORE_NAME_RESOURCES], "readwrite");
        let objectStore = trans.objectStore(STORE_NAME_RESOURCES);
        let request = objectStore.delete(resourceUUID);
        
        request.onsuccess = event => {
            console.log(`deleted resource ${resourceUUID}`);
        };

        await new Promise((resolve, reject) => {trans.oncomplete = resolve; trans.onerror = reject})
    }

    async dbClearResources() {
        if(!db) { console.error("database access before initialization!"); return; }

        let trans = db.transaction([STORE_NAME_RESOURCES], "readwrite");
        let objectStore = trans.objectStore(STORE_NAME_RESOURCES);
        let request = objectStore.clear();
        
        request.onsuccess = event => {
            console.log(`cleared resources store.`);
        };

        await new Promise((resolve, reject) => {trans.oncomplete = resolve; trans.onerror = reject})
    }

    refresh() {
        update(x => x);
    }

    async clear() {
        await this.setFromSerializedData({
            version: saveVersion,
            resources: [],
            settings: defaultGameSettings,
        })
    }

    async loadDefaultProject() {
        await this.setFromSerializedData(defaultProjectData);
    }

    async getSerializedData() {
        let data: SaveData = {
            version: saveVersion,
            resources: Array.from(this.resources.values()),
            settings: this.settings,
        }
        
        return await serialize(data);
    }

    async setFromSerializedData(data: any) {
        // console.log(result);   
        let additionalProperties = new WeakMap<any, any>();
        data = await deserialize(data, additionalProperties);
        console.log(`- resources loaded`)
        console.log(data);

        console.log(`loadin from data with version ${data.version}`)

        let settings: typeof defaultGameSettings;

        let setResourcesFromLegacyFolder = (root: Folder) => {
            this.resources.clear();
            for(let res of root.iterateAllResources()) {
                this.resources.set(res.uuid, res)
            }
        }

        if(!data.version) {
            // pre-versioning
            setResourcesFromLegacyFolder(data);
        } else if(data.version == 1) {
            const d: { 
                root: Folder
                settings: typeof defaultGameSettings
                version: typeof saveVersion
            } = data;

            setResourcesFromLegacyFolder(d.root);
            settings = d.settings;
        } else if(data.version == 2) {
            const d: SaveData = data;
            this.resources.clear();
            for(let res of d.resources) {
                this.resources.set(res.uuid, res)
            }
            settings = d.settings;
        } else if(data.version == 3) {
            const d: SaveData = data;
            this.resources.clear();
            for(let res of d.resources) {
                this.resources.set(res.uuid, res)
            }
            for(let res of d.resources) {
                // undo sprite/bahaviour fuckery
                if(res instanceof Sprite && additionalProperties.has(res)) {
                    let bIDs: string[] = additionalProperties.get(res).behaviourIDs;
                    for(let bID of bIDs) {
                        // move the behavior back into the sprite
                        let behaviour = this.resources.get(bID) as Behaviour;
                        res.behaviours.push(behaviour);
                        this.resources.delete(bID);
                    }
                }
            }
            settings = d.settings;
        } else if(data.version == 4) {
            const d: SaveData = data;
            this.resources.clear();
            this.dbClearResources(); /// async

            for(let res of d.resources) {
                this.resources.set(res.uuid, res)
                this.dbSaveResource(res);
            }
            settings = d.settings;
        }
        else{
            console.error(`Unrecognized version ${data.version}`);
            return;
        }

        this.getStaticResource().settings = settings;

        this.refresh();
    }

    async save(replaceKey?: IDBValidKey) {
        if(!db || !db.transaction) throw new NoDatabaseError();

        let startTime = Date.now();
        
        let dataObject = await this.getSerializedData();
        
        console.log(`serialize took ${Date.now() - startTime} ms`)


        let trans = db.transaction([STORE_NAME_SAVES], "readwrite");
        let objectStore = trans.objectStore(STORE_NAME_SAVES);

        if(replaceKey == undefined) {
            // if last save is less than 10 mins we override, else we save a new save
            const saveDelay = 10*60*1000; // 10 min

            let currentTime = (new Date()).getTime();
            if(currentTime - lastSavedTime < saveDelay) {
                // override save
                let keys = await requestAsync(objectStore.getAllKeys());
                if(keys.length > 0)
                    replaceKey = keys[keys.length - 1]
            } else {
                lastSavedTime = currentTime;
            }
        }

        let request = replaceKey != undefined? 
            objectStore.put(dataObject, replaceKey) 
            : 
            objectStore.put(dataObject)
        ;

        request.onsuccess = event => {
            // event.target.result === customer.ssn;
            console.log(`saved resource ${request.result}`);
        };

        await new Promise((resolve, reject) => { 
            trans.oncomplete = e => { console.log("transaction done"); resolve(e); } 
            trans.onerror = e => reject(request.error); 
        });

        console.log(`saving took ${Date.now() - startTime} ms`)
    }

    async load(customData? : string, customKey? : any) {
        if((!db || !db.transaction) && !customData) {
            console.log("! no database support & no inline data -> use empty project.")
            return;
        }

        let result: any;

        if(customData) {
            console.log(`- load from custom data`)
            result = JSON.parse(customData);
        } else {
            console.log(`- load resource tree from indexed db...`)
            try {
                if(customKey != undefined) {
                    console.log(`- load from specified save file`)
                    let trans = db.transaction(STORE_NAME_SAVES, "readonly");
                    let objectStore = trans.objectStore(STORE_NAME_SAVES);

                    result = await requestAsync(objectStore.get(customKey));
                } else {

                    let trans = db.transaction(STORE_NAME_RESOURCES, "readonly");
                    let objectStore = trans.objectStore(STORE_NAME_RESOURCES);
                    let rnum = await requestAsync(objectStore.count());

                    if(rnum > 0) {
                        console.log("- load from resources store")
                        let resourceObjs = await requestAsync(objectStore.getAll());
                        let staticResource = resourceObjs.find(x => x.uuid == "static") as RStatic
                            || new RStatic(defaultGameSettings, saveVersion);
                        result = {
                            resources: resourceObjs,
                            settings: staticResource.settings,
                            version: staticResource.version,
                        };
                    } 
                    else {
                        console.log(`- load from last save file`)
                        let results = await ResourceManager.getSaveFiles();
                        result = results[results.length - 1].value;
                    }
                }
            } catch (e) {
                console.log(`getting data failed: ${(e as Error)?.message}`);
                console.error(e)
                result = null;
            }
        }

        if(!result) {
            console.log(`- load from document game data`)
            let docData = getDocumentGameData();
            if(docData) {
                result = JSON.parse(docData);
            }
        }

        if(result) {
            try {
                await this.setFromSerializedData(result);
            } catch(e) {
                console.log("!! save data potentially corrupted, loading failed")
            }
        } else {
            console.log("!! no save data found")
        }
    }

    public static async getSaveFiles(): Promise<{key:any, value:any}[]> {
        if(!db || !db.transaction) {
            return [];
        }

        let trans = db.transaction(STORE_NAME_SAVES, "readonly");
        let objectStore = trans.objectStore(STORE_NAME_SAVES);

        let results = [];

        let cursorReq = objectStore.openCursor();
        
        while(true) {
            let cursor = await requestAsync(cursorReq)
            if(!cursor) break;

            results.push({
                key: cursor.key,
                value: cursor.value,
            });
            
            cursor.continue();
        }
        
        return results;
    }
}


let _value = new ResourceManager();
let {subscribe, set, update } = writable(_value);
subscribe(x => _value = x);
update(x => x)

// TODO should I get rid of this?
// more specifically, any occurence of $resourceManager type reactivity could be better 
// expressed as some more specific reactivity, by exposing certain svelte stores
// (this might require some new stores and a lot of rewrites)
// - replacing all occurences of $resourceManager with more fitting reactivity
// - replacing all resourceManager.get() with a direct access to a global var
export let resourceManager = {
    subscribe,
    get: () => _value,
    set: value => {
        if(value != _value) 
            throw new Error("When accessing the resourceManager object store, you are not allowed to change the instance of the manager, only change it's contents.")
        set(value);
    },
}
